name: Python Flask app

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEBUG: true
  PYPI_REMOTE: https://pypi.org/simple

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: pages
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          sed -i 's|${PYPI_REMOTE}|'$PYPI_REMOTE'|g' Pipfile
          pipenv install --categories "packages api"
          LOGURU_LEVEL="ERROR" pipenv run python -c 'import geocoder; print(geocoder.__version__)'  # otherwise next line doesn't error
          LOGURU_LEVEL="ERROR" echo export APPLICATION_TAG_VERSION=`pipenv run python -c 'import geocoder; print(geocoder.__version__)'` >> $GITHUB_ENV
      - name: Lint with flake8
        run: |
          pipenv install --categories "dev-packages" --skip-lock
          pipenv run flake8 geocoder --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=tests/conftest.py
          pipenv run flake8 --ignore=W504 geocoder --max-complexity=10 --max-line-length=120 --statistics --exclude=tests/conftest.py
      - name: Test with coverage and pytest
        run: |
          pipenv run coverage run --source geocoder -m pytest
          pipenv run coverage report
          pipenv run coverage xml
      - name: Test security
        run: |
          pipenv run bandit -r geocoder
      - name: Build documentation
        run: |
          cd docs
          PIPENV_PIPFILE=../Pipfile pipenv run make html
          cd ..
      - name: Upload documentation
        run: |
          export LATEST_COMMITER_EMAIL=`git --no-pager log -1 -s --format="%ae"`
          echo $LATEST_COMMITER_EMAIL
          git config --global user.email "$LATEST_COMMITTER_EMAIL"
          git config --global user.name "$GITHUB_ACTOR"
          git add -f docs/build/html
          git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}"
          git checkout pages
          rm -rf docs
          mkdir docs_temp
          git checkout master -- docs README.md
          cp -rf docs/build/html/* docs_temp/
          rm -rf docs
          mv docs_temp docs
          touch docs/.nojekyll
          git add docs
          if ! git diff-index --quiet HEAD -- ; then git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}" && git push origin pages --force; else echo "Nothing to push"; fi
          git checkout master
          ls -al
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.APPLICATION_TAG_VERSION }}
          build-args: |
            BASE_IMAGE=python:${{ matrix.python-version }}
            EMAIL=$LATEST_COMMITTER_EMAIL
            DOCKER_REGISTRY=
